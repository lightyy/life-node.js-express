라우팅
라우팅 은 애플리케이션의 엔드 포인트 (URI)가 클라이언트 요청에 응답하는 방법을 나타냅니다. 라우팅에 대한 소개는 기본 라우팅을 참조하십시오 .

appHTTP 메소드에 해당하는 Express 오브젝트의 메소드를 사용하여 라우팅을 정의 합니다. 예를 들어 app.get()GET 요청 app.post을 처리하고 POST 요청을 처리합니다. 전체 목록은 app.METHOD를 참조하십시오 . app.all () 을 사용 하여 모든 HTTP 메소드를 처리하고 app.use () 를 사용하여 미들웨어 를 콜백 함수로 지정할 수 있습니다 (자세한 내용은 미들웨어 사용 참조).

이러한 라우팅 메서드는 응용 프로그램이 지정된 경로 (종료점) 및 HTTP 메서드에 대한 요청을받을 때 호출되는 콜백 함수 ( "핸들러 함수"라고도 함)를 지정합니다. 즉, 응용 프로그램은 지정된 경로 및 방법과 일치하는 요청을 "수신"하고 일치를 감지하면 지정된 콜백 함수를 호출합니다.

실제로 라우팅 메소드는 둘 이상의 콜백 함수를 인수로 가질 수 있습니다. 콜백 함수가 여러 개인 경우 콜백 함수에 next인수 로 제공 한 다음 함수 next()본문 내에서 호출 하여 다음 콜백으로 제어를 전달 하는 것이 중요합니다 .

다음 코드는 매우 기본적인 경로의 예입니다.

var express = require('express')
var app = express()

// respond with "hello world" when a GET request is made to the homepage
app.get('/', function (req, res) {
  res.send('hello world')
})
경로 방법
라우트 메소드는 HTTP 메소드 중 하나에서 파생되며 express클래스 의 인스턴스에 첨부됩니다 .

다음 코드는 GET 및 POST 메소드에 대해 앱의 루트로 정의 된 경로의 예입니다.

// GET method route
app.get('/', function (req, res) {
  res.send('GET request to the homepage')
})

// POST method route
app.post('/', function (req, res) {
  res.send('POST request to the homepage')
})
Express는 모든 HTTP 요청 메소드 ( get, post등)에 해당하는 메소드를 지원합니다 . 전체 목록은 app.METHOD를 참조하십시오 .

모든 HTTP 요청 방법 app.all()에 대한 경로에서 미들웨어 기능을로드하는 데 사용되는 특수 라우팅 방법이 있습니다. 예를 들어, 다음 핸들러는 GET, POST, PUT, DELETE 또는 http 모듈 에서 지원되는 다른 HTTP 요청 방법을 사용하든 경로 "/ secret"에 대한 요청에 대해 실행됩니다 .

app.all('/secret', function (req, res, next) {
  console.log('Accessing the secret section ...')
  next() // pass control to the next handler
})
경로 경로
라우트 경로는 요청 방법과 함께 요청을 작성할 수있는 엔드 포인트를 정의합니다. 경로 경로는 문자열, 문자열 패턴 또는 정규식 일 수 있습니다.

문자는 ?, +, *, 및 ()자신의 정규 표현식 대응의 하위 집합입니다. 하이픈 ( -)과 점 ( .)은 문자 그대로 문자열 기반 경로로 해석됩니다.

$경로 문자열에 달러 문자 ( ) 를 사용해야하는 경우 ([및로 이스케이프 처리하십시오 ]). 예를 들어 " /data/$book" 요청의 경로 문자열은 " /data/([\$])book"입니다.

Express는 경로 경로 를 일치시키기 위해 경로에서 정규 경로를 사용 합니다. 경로 경로를 정의 할 수있는 모든 가능성에 대해서는 정규 경로 문서를 참조하십시오. Express Route Tester 는 기본 Express 경로를 테스트하기위한 편리한 도구이지만 패턴 일치를 지원하지 않습니다.

쿼리 문자열은 경로 경로의 일부가 아닙니다.

다음은 문자열을 기반으로하는 경로 경로의 예입니다.

이 경로 경로는 요청을 루트 경로와 일치시킵니다 /.

app.get('/', function (req, res) {
  res.send('root')
})
이 경로 경로는의 요청과 일치합니다 /about.

app.get('/about', function (req, res) {
  res.send('about')
})
이 경로 경로는의 요청과 일치합니다 /random.text.

app.get('/random.text', function (req, res) {
  res.send('random.text')
})
다음은 문자열 패턴을 기반으로 한 경로 경로의 예입니다.

이 경로의 경로가 일치 acd하고 abcd.

app.get('/ab?cd', function (req, res) {
  res.send('ab?cd')
})
이 경로는 abcd,, abbcd등과 일치합니다 abbbcd.

app.get('/ab+cd', function (req, res) {
  res.send('ab+cd')
})
이 경로의 경로가 일치합니다 abcd, abxcd, abRANDOMcd, ab123cd,과에 있도록합니다.

app.get('/ab*cd', function (req, res) {
  res.send('ab*cd')
})
이 경로의 경로가 일치 /abe하고 /abcde.

app.get('/ab(cd)?e', function (req, res) {
  res.send('ab(cd)?e')
})
정규식을 기반으로하는 경로 경로의 예 :

이 경로는 "a"와 일치합니다.

app.get(/a/, function (req, res) {
  res.send('/a/')
})
이 경로의 경로가 일치 butterfly하고 dragonfly있지만 butterflyman, dragonflyman그리고에 이렇게.

app.get(/.*fly$/, function (req, res) {
  res.send('/.*fly$/')
})
경로 매개 변수
경로 매개 변수는 URL에서 해당 위치에 지정된 값을 캡처하는 데 사용되는 이름이 지정된 URL 세그먼트입니다. 캡처 된 값은 req.params경로에 지정된 라우트 매개 변수의 이름을 해당 키로 사용 하여 오브젝트에 채워집니다 .

Route path: /users/:userId/books/:bookId
Request URL: http://localhost:3000/users/34/books/8989
req.params: { "userId": "34", "bookId": "8989" }
경로 매개 변수로 경로를 정의하려면 아래 표시된대로 경로 경로에 경로 매개 변수를 지정하십시오.

app.get('/users/:userId/books/:bookId', function (req, res) {
  res.send(req.params)
})
경로 매개 변수의 이름은 "단어 문자"([A-Za-z0-9_])로 구성되어야합니다.

하이픈 ( -)과 점 ( .)은 문자 그대로 해석되므로 유용한 목적으로 경로 매개 변수와 함께 사용할 수 있습니다.

Route path: /flights/:from-:to
Request URL: http://localhost:3000/flights/LAX-SFO
req.params: { "from": "LAX", "to": "SFO" }
Route path: /plantae/:genus.:species
Request URL: http://localhost:3000/plantae/Prunus.persica
req.params: { "genus": "Prunus", "species": "persica" }
라우트 매개 변수와 일치 할 수있는 정확한 문자열을보다 잘 제어하려면 괄호 ( ())로 정규 표현식을 추가 할 수 있습니다 .

Route path: /user/:userId(\d+)
Request URL: http://localhost:3000/user/42
req.params: {"userId": "42"}
정규식은 일반적으로 리터럴 문자열의 일부이므로 \추가 백 슬래시가 있는 문자 (예 :) 를 이스케이프해야 합니다 \\d+.

Express 4.x 에서 정규식 의 *문자는 일반적인 방식으로 해석되지 않습니다 . 해결 방법으로 {0,}대신 사용하십시오 *. 이것은 Express 5에서 수정 될 것입니다.

경로 핸들러
요청을 처리하기 위해 미들웨어 처럼 동작하는 여러 콜백 함수를 제공 할 수 있습니다 . 유일한 예외는 이러한 콜백이 next('route')나머지 경로 콜백을 우회하기 위해 호출 될 수 있다는 것 입니다. 이 메커니즘을 사용하여 경로에 사전 조건을 적용한 다음 현재 경로를 진행할 이유가없는 경우 후속 경로로 제어를 전달할 수 있습니다.

라우트 핸들러는 다음 예제와 같이 함수, 함수 배열 또는 둘의 조합 형식 일 수 있습니다.

단일 콜백 함수는 경로를 처리 할 수 ​​있습니다. 예를 들면 다음과 같습니다.

app.get('/example/a', function (req, res) {
  res.send('Hello from A!')
})
둘 이상의 콜백 함수가 경로를 처리 할 수 ​​있습니다 ( next객체 를 지정해야 합니다). 예를 들면 다음과 같습니다.

app.get('/example/b', function (req, res, next) {
  console.log('the response will be sent by the next function ...')
  next()
}, function (req, res) {
  res.send('Hello from B!')
})
콜백 함수 배열은 경로를 처리 할 수 ​​있습니다. 예를 들면 다음과 같습니다.

var cb0 = function (req, res, next) {
  console.log('CB0')
  next()
}

var cb1 = function (req, res, next) {
  console.log('CB1')
  next()
}

var cb2 = function (req, res) {
  res.send('Hello from C!')
}

app.get('/example/c', [cb0, cb1, cb2])
독립 함수와 함수 배열을 조합하여 경로를 처리 할 수 ​​있습니다. 예를 들면 다음과 같습니다.

var cb0 = function (req, res, next) {
  console.log('CB0')
  next()
}

var cb1 = function (req, res, next) {
  console.log('CB1')
  next()
}

app.get('/example/d', [cb0, cb1], function (req, res, next) {
  console.log('the response will be sent by the next function ...')
  next()
}, function (req, res) {
  res.send('Hello from D!')
})
응답 방법
res다음 표의 응답 객체 ( )에 대한 메소드 는 클라이언트에 응답을 보내고 요청-응답주기를 종료 할 수 있습니다. 라우트 핸들러에서 이러한 메소드를 호출하지 않으면 클라이언트 요청이 정지 된 상태로 남아 있습니다.

방법	기술
res.download ()	파일을 다운로드하라는 메시지를 표시합니다.
res.end ()	응답 프로세스를 종료하십시오.
res.json ()	JSON 응답을 보냅니다.
res.jsonp ()	JSONP 지원으로 JSON 응답을 보냅니다.
res.redirect ()	요청을 리디렉션하십시오.
res.render ()	뷰 템플릿을 렌더링합니다.
res.send ()	다양한 유형의 응답을 보냅니다.
res.sendFile ()	파일을 옥텟 스트림으로 보냅니다.
res.sendStatus ()	응답 상태 코드를 설정하고 문자열 표시를 응답 본문으로 보냅니다.
app.route ()
을 사용하여 경로 경로에 대해 체인 가능한 경로 처리기를 만들 수 있습니다 app.route(). 경로는 단일 위치에 지정되므로 중복성 및 오타를 줄이는 것처럼 모듈 식 경로를 만드는 것이 도움이됩니다. 경로에 대한 자세한 내용은 Router () documentation을 참조하십시오 .

다음은를 사용하여 정의 된 연결 경로 처리기의 예입니다 app.route().

app.route('/book')
  .get(function (req, res) {
    res.send('Get a random book')
  })
  .post(function (req, res) {
    res.send('Add a book')
  })
  .put(function (req, res) {
    res.send('Update the book')
  })
특급. 라우터
express.Router클래스를 사용하여 마운트 가능한 모듈 식 라우트 핸들러를 작성 하십시오 . Router인스턴스는 완전한 미들웨어 및 라우팅 시스템입니다; 이러한 이유로 종종 "미니 앱"이라고합니다.

다음 예제는 라우터를 모듈로 작성하고 미들웨어 기능을로드하고 일부 라우트를 정의하며 기본 앱의 경로에 라우터 모듈을 마운트합니다.

birds.js다음 내용으로 app 디렉토리에 이름이 지정된 라우터 파일을 만듭니다 .

var express = require('express')
var router = express.Router()

// middleware that is specific to this router
router.use(function timeLog (req, res, next) {
  console.log('Time: ', Date.now())
  next()
})
// define the home page route
router.get('/', function (req, res) {
  res.send('Birds home page')
})
// define the about route
router.get('/about', function (req, res) {
  res.send('About birds')
})

module.exports = router
그런 다음 앱에 라우터 모듈을로드하십시오.

var birds = require('./birds')

// ...

app.use('/birds', birds)
이제 앱은 /birds및에 대한 요청을 처리 하고 경로와 관련된 미들웨어 함수를 /birds/about호출 할 수 timeLog있습니다.라우팅
라우팅 은 애플리케이션의 엔드 포인트 (URI)가 클라이언트 요청에 응답하는 방법을 나타냅니다. 라우팅에 대한 소개는 기본 라우팅을 참조하십시오 .

appHTTP 메소드에 해당하는 Express 오브젝트의 메소드를 사용하여 라우팅을 정의 합니다. 예를 들어 app.get()GET 요청 app.post을 처리하고 POST 요청을 처리합니다. 전체 목록은 app.METHOD를 참조하십시오 . app.all () 을 사용 하여 모든 HTTP 메소드를 처리하고 app.use () 를 사용하여 미들웨어 를 콜백 함수로 지정할 수 있습니다 (자세한 내용은 미들웨어 사용 참조).

이러한 라우팅 메서드는 응용 프로그램이 지정된 경로 (종료점) 및 HTTP 메서드에 대한 요청을받을 때 호출되는 콜백 함수 ( "핸들러 함수"라고도 함)를 지정합니다. 즉, 응용 프로그램은 지정된 경로 및 방법과 일치하는 요청을 "수신"하고 일치를 감지하면 지정된 콜백 함수를 호출합니다.

실제로 라우팅 메소드는 둘 이상의 콜백 함수를 인수로 가질 수 있습니다. 콜백 함수가 여러 개인 경우 콜백 함수에 next인수 로 제공 한 다음 함수 next()본문 내에서 호출 하여 다음 콜백으로 제어를 전달 하는 것이 중요합니다 .

다음 코드는 매우 기본적인 경로의 예입니다.

var express = require('express')
var app = express()

// respond with "hello world" when a GET request is made to the homepage
app.get('/', function (req, res) {
  res.send('hello world')
})
경로 방법
라우트 메소드는 HTTP 메소드 중 하나에서 파생되며 express클래스 의 인스턴스에 첨부됩니다 .

다음 코드는 GET 및 POST 메소드에 대해 앱의 루트로 정의 된 경로의 예입니다.

// GET method route
app.get('/', function (req, res) {
  res.send('GET request to the homepage')
})

// POST method route
app.post('/', function (req, res) {
  res.send('POST request to the homepage')
})
Express는 모든 HTTP 요청 메소드 ( get, post등)에 해당하는 메소드를 지원합니다 . 전체 목록은 app.METHOD를 참조하십시오 .

모든 HTTP 요청 방법 app.all()에 대한 경로에서 미들웨어 기능을로드하는 데 사용되는 특수 라우팅 방법이 있습니다. 예를 들어, 다음 핸들러는 GET, POST, PUT, DELETE 또는 http 모듈 에서 지원되는 다른 HTTP 요청 방법을 사용하든 경로 "/ secret"에 대한 요청에 대해 실행됩니다 .

app.all('/secret', function (req, res, next) {
  console.log('Accessing the secret section ...')
  next() // pass control to the next handler
})
경로 경로
라우트 경로는 요청 방법과 함께 요청을 작성할 수있는 엔드 포인트를 정의합니다. 경로 경로는 문자열, 문자열 패턴 또는 정규식 일 수 있습니다.

문자는 ?, +, *, 및 ()자신의 정규 표현식 대응의 하위 집합입니다. 하이픈 ( -)과 점 ( .)은 문자 그대로 문자열 기반 경로로 해석됩니다.

$경로 문자열에 달러 문자 ( ) 를 사용해야하는 경우 ([및로 이스케이프 처리하십시오 ]). 예를 들어 " /data/$book" 요청의 경로 문자열은 " /data/([\$])book"입니다.

Express는 경로 경로 를 일치시키기 위해 경로에서 정규 경로를 사용 합니다. 경로 경로를 정의 할 수있는 모든 가능성에 대해서는 정규 경로 문서를 참조하십시오. Express Route Tester 는 기본 Express 경로를 테스트하기위한 편리한 도구이지만 패턴 일치를 지원하지 않습니다.

쿼리 문자열은 경로 경로의 일부가 아닙니다.

다음은 문자열을 기반으로하는 경로 경로의 예입니다.

이 경로 경로는 요청을 루트 경로와 일치시킵니다 /.

app.get('/', function (req, res) {
  res.send('root')
})
이 경로 경로는의 요청과 일치합니다 /about.

app.get('/about', function (req, res) {
  res.send('about')
})
이 경로 경로는의 요청과 일치합니다 /random.text.

app.get('/random.text', function (req, res) {
  res.send('random.text')
})
다음은 문자열 패턴을 기반으로 한 경로 경로의 예입니다.

이 경로의 경로가 일치 acd하고 abcd.

app.get('/ab?cd', function (req, res) {
  res.send('ab?cd')
})
이 경로는 abcd,, abbcd등과 일치합니다 abbbcd.

app.get('/ab+cd', function (req, res) {
  res.send('ab+cd')
})
이 경로의 경로가 일치합니다 abcd, abxcd, abRANDOMcd, ab123cd,과에 있도록합니다.

app.get('/ab*cd', function (req, res) {
  res.send('ab*cd')
})
이 경로의 경로가 일치 /abe하고 /abcde.

app.get('/ab(cd)?e', function (req, res) {
  res.send('ab(cd)?e')
})
정규식을 기반으로하는 경로 경로의 예 :

이 경로는 "a"와 일치합니다.

app.get(/a/, function (req, res) {
  res.send('/a/')
})
이 경로의 경로가 일치 butterfly하고 dragonfly있지만 butterflyman, dragonflyman그리고에 이렇게.

app.get(/.*fly$/, function (req, res) {
  res.send('/.*fly$/')
})
경로 매개 변수
경로 매개 변수는 URL에서 해당 위치에 지정된 값을 캡처하는 데 사용되는 이름이 지정된 URL 세그먼트입니다. 캡처 된 값은 req.params경로에 지정된 라우트 매개 변수의 이름을 해당 키로 사용 하여 오브젝트에 채워집니다 .

Route path: /users/:userId/books/:bookId
Request URL: http://localhost:3000/users/34/books/8989
req.params: { "userId": "34", "bookId": "8989" }
경로 매개 변수로 경로를 정의하려면 아래 표시된대로 경로 경로에 경로 매개 변수를 지정하십시오.

app.get('/users/:userId/books/:bookId', function (req, res) {
  res.send(req.params)
})
경로 매개 변수의 이름은 "단어 문자"([A-Za-z0-9_])로 구성되어야합니다.

하이픈 ( -)과 점 ( .)은 문자 그대로 해석되므로 유용한 목적으로 경로 매개 변수와 함께 사용할 수 있습니다.

Route path: /flights/:from-:to
Request URL: http://localhost:3000/flights/LAX-SFO
req.params: { "from": "LAX", "to": "SFO" }
Route path: /plantae/:genus.:species
Request URL: http://localhost:3000/plantae/Prunus.persica
req.params: { "genus": "Prunus", "species": "persica" }
라우트 매개 변수와 일치 할 수있는 정확한 문자열을보다 잘 제어하려면 괄호 ( ())로 정규 표현식을 추가 할 수 있습니다 .

Route path: /user/:userId(\d+)
Request URL: http://localhost:3000/user/42
req.params: {"userId": "42"}
정규식은 일반적으로 리터럴 문자열의 일부이므로 \추가 백 슬래시가 있는 문자 (예 :) 를 이스케이프해야 합니다 \\d+.

Express 4.x 에서 정규식 의 *문자는 일반적인 방식으로 해석되지 않습니다 . 해결 방법으로 {0,}대신 사용하십시오 *. 이것은 Express 5에서 수정 될 것입니다.

경로 핸들러
요청을 처리하기 위해 미들웨어 처럼 동작하는 여러 콜백 함수를 제공 할 수 있습니다 . 유일한 예외는 이러한 콜백이 next('route')나머지 경로 콜백을 우회하기 위해 호출 될 수 있다는 것 입니다. 이 메커니즘을 사용하여 경로에 사전 조건을 적용한 다음 현재 경로를 진행할 이유가없는 경우 후속 경로로 제어를 전달할 수 있습니다.

라우트 핸들러는 다음 예제와 같이 함수, 함수 배열 또는 둘의 조합 형식 일 수 있습니다.

단일 콜백 함수는 경로를 처리 할 수 ​​있습니다. 예를 들면 다음과 같습니다.

app.get('/example/a', function (req, res) {
  res.send('Hello from A!')
})
둘 이상의 콜백 함수가 경로를 처리 할 수 ​​있습니다 ( next객체 를 지정해야 합니다). 예를 들면 다음과 같습니다.

app.get('/example/b', function (req, res, next) {
  console.log('the response will be sent by the next function ...')
  next()
}, function (req, res) {
  res.send('Hello from B!')
})
콜백 함수 배열은 경로를 처리 할 수 ​​있습니다. 예를 들면 다음과 같습니다.

var cb0 = function (req, res, next) {
  console.log('CB0')
  next()
}

var cb1 = function (req, res, next) {
  console.log('CB1')
  next()
}

var cb2 = function (req, res) {
  res.send('Hello from C!')
}

app.get('/example/c', [cb0, cb1, cb2])
독립 함수와 함수 배열을 조합하여 경로를 처리 할 수 ​​있습니다. 예를 들면 다음과 같습니다.

var cb0 = function (req, res, next) {
  console.log('CB0')
  next()
}

var cb1 = function (req, res, next) {
  console.log('CB1')
  next()
}

app.get('/example/d', [cb0, cb1], function (req, res, next) {
  console.log('the response will be sent by the next function ...')
  next()
}, function (req, res) {
  res.send('Hello from D!')
})
응답 방법
res다음 표의 응답 객체 ( )에 대한 메소드 는 클라이언트에 응답을 보내고 요청-응답주기를 종료 할 수 있습니다. 라우트 핸들러에서 이러한 메소드를 호출하지 않으면 클라이언트 요청이 정지 된 상태로 남아 있습니다.

방법	기술
res.download ()	파일을 다운로드하라는 메시지를 표시합니다.
res.end ()	응답 프로세스를 종료하십시오.
res.json ()	JSON 응답을 보냅니다.
res.jsonp ()	JSONP 지원으로 JSON 응답을 보냅니다.
res.redirect ()	요청을 리디렉션하십시오.
res.render ()	뷰 템플릿을 렌더링합니다.
res.send ()	다양한 유형의 응답을 보냅니다.
res.sendFile ()	파일을 옥텟 스트림으로 보냅니다.
res.sendStatus ()	응답 상태 코드를 설정하고 문자열 표시를 응답 본문으로 보냅니다.
app.route ()
을 사용하여 경로 경로에 대해 체인 가능한 경로 처리기를 만들 수 있습니다 app.route(). 경로는 단일 위치에 지정되므로 중복성 및 오타를 줄이는 것처럼 모듈 식 경로를 만드는 것이 도움이됩니다. 경로에 대한 자세한 내용은 Router () documentation을 참조하십시오 .

다음은를 사용하여 정의 된 연결 경로 처리기의 예입니다 app.route().

app.route('/book')
  .get(function (req, res) {
    res.send('Get a random book')
  })
  .post(function (req, res) {
    res.send('Add a book')
  })
  .put(function (req, res) {
    res.send('Update the book')
  })
특급. 라우터
express.Router클래스를 사용하여 마운트 가능한 모듈 식 라우트 핸들러를 작성 하십시오 . Router인스턴스는 완전한 미들웨어 및 라우팅 시스템입니다; 이러한 이유로 종종 "미니 앱"이라고합니다.

다음 예제는 라우터를 모듈로 작성하고 미들웨어 기능을로드하고 일부 라우트를 정의하며 기본 앱의 경로에 라우터 모듈을 마운트합니다.

birds.js다음 내용으로 app 디렉토리에 이름이 지정된 라우터 파일을 만듭니다 .

var express = require('express')
var router = express.Router()

// middleware that is specific to this router
router.use(function timeLog (req, res, next) {
  console.log('Time: ', Date.now())
  next()
})
// define the home page route
router.get('/', function (req, res) {
  res.send('Birds home page')
})
// define the about route
router.get('/about', function (req, res) {
  res.send('About birds')
})

module.exports = router
그런 다음 앱에 라우터 모듈을로드하십시오.

var birds = require('./birds')

// ...

app.use('/birds', birds)
이제 앱은 /birds및에 대한 요청을 처리 하고 경로와 관련된 미들웨어 함수를 /birds/about호출 할 수 timeLog있습니다.